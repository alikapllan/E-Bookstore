
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pc
 */
public class basket extends javax.swing.JFrame {

    ArrayList<books> list_of_books_inBasket = new book_ui().get_selected_books_inBasket();
    int logged_in_customer_id = new login().customer_id;
    int total_price;
    int shopping_basket_id;
    //warehouse details
    String warehouse_city = "Istanbul";
    int warehouse_phoneNr = 3256343;
    
    String pattern = "dd-MM-yyyy";
    String dateInString = new SimpleDateFormat(pattern).format(new Date());
    
    public basket() {
        initComponents();
        
        //calculating total price of the books in basket
        calculate_total_price();
        
        //showing book datas in the basket live
        show_books_live();

        //puts the window in the middle of the screen
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        book_table = new javax.swing.JTable();
        bbook_isbn_field = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bbook_name_field = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bbook_year_field = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        bbook_price_field = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        bbook_page_field = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bbook_author_field = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bbook_publisher_field = new javax.swing.JTextField();
        book_buy_button = new javax.swing.JButton();
        book_drop_button = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        credit_card_field = new javax.swing.JTextField();
        bbook_total_price_field = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        last_shoppings = new javax.swing.JLabel();
        back_icon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BASKET");

        book_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ISBN", "Name", "Year", "Price", "Page ", "Author", "Publisher"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        book_table.setToolTipText("");
        book_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                book_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(book_table);

        bbook_isbn_field.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Book ISBN :");

        bbook_name_field.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Book Name :");

        bbook_year_field.setEditable(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Year :");

        bbook_price_field.setEditable(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Book Price :");

        bbook_page_field.setEditable(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Book Page :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Book Author :");

        bbook_author_field.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Book Publisher :");

        bbook_publisher_field.setEditable(false);

        book_buy_button.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        book_buy_button.setText("BUY");
        book_buy_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                book_buy_buttonActionPerformed(evt);
            }
        });

        book_drop_button.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        book_drop_button.setText("DROP");
        book_drop_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                book_drop_buttonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Credit Card :");

        credit_card_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                credit_card_fieldKeyTyped(evt);
            }
        });

        bbook_total_price_field.setEditable(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Total Price : ");

        last_shoppings.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        last_shoppings.setText("See your last orders");
        last_shoppings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                last_shoppingsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                last_shoppingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                last_shoppingsMouseExited(evt);
            }
        });

        back_icon.setIcon(new javax.swing.ImageIcon("C:\\Users\\pc\\Desktop\\Tulpar için\\Udemy Courses\\SQL\\E-Bücherei Project\\icons\\back.png")); // NOI18N
        back_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                back_iconMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                back_iconMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                back_iconMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_icon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bbook_year_field, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bbook_name_field, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bbook_price_field)
                            .addComponent(bbook_page_field)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bbook_author_field))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(book_drop_button, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(book_buy_button, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(bbook_publisher_field))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(credit_card_field, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(bbook_total_price_field, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bbook_isbn_field)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(last_shoppings)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(last_shoppings, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(bbook_isbn_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(bbook_name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(bbook_year_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(bbook_price_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(bbook_page_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(bbook_author_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(bbook_publisher_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bbook_total_price_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(credit_card_field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(book_buy_button)
                            .addComponent(book_drop_button))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(26, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back_icon)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void last_shoppingsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_last_shoppingsMouseEntered
        last_shoppings.setForeground(Color.BLUE);
        Border border = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLUE);
        last_shoppings.setBorder(border);
    }//GEN-LAST:event_last_shoppingsMouseEntered

    private void last_shoppingsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_last_shoppingsMouseExited
        last_shoppings.setForeground(Color.BLACK);
        last_shoppings.setBorder(null);
    }//GEN-LAST:event_last_shoppingsMouseExited

    private void last_shoppingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_last_shoppingsMouseClicked
        dispose();
        new last_shoppings().setVisible(true);
    }//GEN-LAST:event_last_shoppingsMouseClicked

    private void back_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_iconMouseClicked
        dispose();
        new book_ui().setVisible(true);
    }//GEN-LAST:event_back_iconMouseClicked

    private void back_iconMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_iconMouseEntered
        Border border = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLACK);
        back_icon.setBorder(border);
    }//GEN-LAST:event_back_iconMouseEntered

    private void back_iconMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_iconMouseExited
        back_icon.setBorder(null);
    }//GEN-LAST:event_back_iconMouseExited

    private void book_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_book_tableMouseClicked
        try {
            transfer_bookdatas_to_fields();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_book_tableMouseClicked

    private void book_drop_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_book_drop_buttonActionPerformed
        if(bbook_isbn_field.getText().equals("")){
            JOptionPane.showMessageDialog(null, "There is no selected book to drop!","NO BOOK TO DROP",2);
        }else{
            Integer book_isbn = Integer.valueOf(bbook_isbn_field.getText());
            for(int i=0; i<list_of_books_inBasket.size();i++){
                if(book_isbn == list_of_books_inBasket.get(i).getIsbn()){
                    list_of_books_inBasket.remove(i);
                }
            }
            JOptionPane.showMessageDialog(null, "Selected book has been removed from basket successfully!");
            clean_fields();
            total_price = 0;
            calculate_total_price();
            show_books_live();
        }
    }//GEN-LAST:event_book_drop_buttonActionPerformed

    private void book_buy_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_book_buy_buttonActionPerformed
        if(!credit_card_field.getText().equals("")){
            
            if (list_of_books_inBasket.size()!=0) {
                
                //as we have only 2 transporters we want one of them randomly to bring our order
                //that gives us a random number. either 1 or 2
                int transporter_id = (int)(Math.random() * 2) + 1;
                
                String SQL_expression = "INSERT INTO shoppingbasket(customer_id,sb_total_price,creditcart_no) VALUES(?,?,?)";
                
                try {
                
                postresql_db_connection db_connection = new postresql_db_connection();
                PreparedStatement st = db_connection.connect().prepareStatement(SQL_expression);
                ResultSet rs;
                
                st.setInt(1, logged_in_customer_id);
                st.setInt(2, Integer.valueOf(total_price));
                st.setString(3, credit_card_field.getText());
                
                if(st.executeUpdate() != 0){
                    JOptionPane.showMessageDialog(null, "Congraculations!");
                    
                    //We get here the biggest shopping basket id. Because we will create rows related to selected books.
                    //for each book we will create a new row. For Ex : in shopping basket 1 has books 1,2,3 etc. 
                    String SQL_expression2 = "SELECT sb_id FROM shoppingbasket ORDER BY sb_id DESC LIMIT 1";
                        st = db_connection.connect().prepareStatement(SQL_expression2);
                        rs = st.executeQuery();
                    while(rs.next()){
                        shopping_basket_id = rs.getInt("sb_id");
                    }
                    //inserting basket data to the transport table
                    String SQL_transport ="INSERT INTO transport(transport_date,sb_id,wh_id,tworker_id) VALUES(?,?,?,?)";
                    
                    st = db_connection.connect().prepareStatement(SQL_transport);
                        st.setString(1, dateInString);
                        st.setInt(2, shopping_basket_id);
                        st.setInt(3, 1);
                        st.setInt(4, transporter_id);
                    st.executeUpdate();
                    
                    //adding all each books to the table existing in the basket
                        for(int i=0; i<list_of_books_inBasket.size();i++){
                            String SQL_expression3 = "INSERT INTO shoppingbasket_book(sb_id,customer_id,book_isbn,count) VALUES (?, ?, ?, ?)";
                            String SQL_expression4 = "DELETE FROM book_not_to_update WHERE book_isbn=?";
                            try {
                                st = db_connection.connect().prepareStatement(SQL_expression3);
                                
                                st.setInt(1, shopping_basket_id);
                                st.setInt(2, logged_in_customer_id);
                                st.setInt(3, list_of_books_inBasket.get(i).getIsbn());
                                st.setInt(4, 1);
                                st.executeUpdate();
                                
                                st = db_connection.connect().prepareStatement(SQL_expression4);
                                st.setInt(1, list_of_books_inBasket.get(i).getIsbn());
                                st.executeUpdate();
                                
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        show_books_live();
                        String SQL_warehouse_info = "SELECT tworker_name, tworker_surname FROM transport_worker WHERE tworker_id=?";
                        
                        st = db_connection.connect().prepareStatement(SQL_warehouse_info);
                        st.setInt(1, transporter_id);
                        rs = st.executeQuery();
                        if(rs.next()){
                            JOptionPane.showMessageDialog(null, "Your order will be delivered by "+rs.getString("tworker_name") 
                                                + " " + rs.getString("tworker_surname")+" from " + warehouse_city+"\nWarehouse phone: "+warehouse_phoneNr);
                        }
                    
                    dispose();
                    new book_ui().setVisible(true);
                }
                
            } catch (Exception e) {
                e.printStackTrace();
            }
                list_of_books_inBasket.clear();
            
            }else{
                JOptionPane.showMessageDialog(null, "THERE IS NO BOOK IN BASKET!","NO BOOK",2);
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "A CREDIT CARD IS REQUIRED TO BUY BOOKS!","CREDIT CARD",2);
        }
    }//GEN-LAST:event_book_buy_buttonActionPerformed

    private void credit_card_fieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_credit_card_fieldKeyTyped
        //only 15 charackters allowed
        if((credit_card_field.getText() + evt.getKeyChar()).length() >= 17){
            evt.consume();
        }

        //Only numbers as input allowed
        if(!Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_credit_card_fieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(basket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(basket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(basket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(basket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new basket().setVisible(true);
            }
        });
    }
    void show_books_live(){
        
        DefaultTableModel model = (DefaultTableModel)book_table.getModel();
            model.setRowCount(0);
        Object[] row = new Object[7];
        
        for(int i=0; i<list_of_books_inBasket.size();i++){
            for(int j=0; j<list_of_books_inBasket.size();j++){
                if (i == j) {
                   continue;
                }
                if (list_of_books_inBasket.get(i).getIsbn() == list_of_books_inBasket.get(j).getIsbn()) {
                    list_of_books_inBasket.remove(i);
                    total_price = 0;
                    calculate_total_price();
                }
            }
        }
       
        for(int i=0; i<list_of_books_inBasket.size();i++){
            
            row[0] = list_of_books_inBasket.get(i).getIsbn();
            row[1] = list_of_books_inBasket.get(i).getName();
            row[2] = list_of_books_inBasket.get(i).getYear();
            row[3] = list_of_books_inBasket.get(i).getPrice();
            row[4] = list_of_books_inBasket.get(i).getPage_number();
            row[5] = list_of_books_inBasket.get(i).getAuthor_id();
            row[6] = list_of_books_inBasket.get(i).getPublisher_id();
            
            //with this method we allow to all book datas live existing in the database
            model.addRow(row);
        }
    }
    
    void transfer_bookdatas_to_fields(){
        try {
            DefaultTableModel tableModel = (DefaultTableModel)book_table.getModel();
            
            int row = book_table.getSelectedRow();

            bbook_isbn_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(0)));
            bbook_name_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(1)));
            bbook_year_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(2)));
            bbook_price_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(3)));
            bbook_page_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(4)));
            bbook_author_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(5)));
            bbook_publisher_field.setText(String.valueOf(tableModel.getDataVector().elementAt(book_table.convertRowIndexToModel(row)).get(6)));
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    void calculate_total_price(){
        for(int i=0; i<list_of_books_inBasket.size();i++){
            total_price += list_of_books_inBasket.get(i).getPrice();
        }
        bbook_total_price_field.setText(String.valueOf(total_price));
    }
    void clean_fields(){
        bbook_isbn_field.setText("");
        bbook_name_field.setText("");
        bbook_year_field.setText("");
        bbook_price_field.setText("");
        bbook_page_field.setText("");
        bbook_author_field.setText("");
        bbook_publisher_field.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back_icon;
    private javax.swing.JTextField bbook_author_field;
    private javax.swing.JTextField bbook_isbn_field;
    private javax.swing.JTextField bbook_name_field;
    private javax.swing.JTextField bbook_page_field;
    private javax.swing.JTextField bbook_price_field;
    private javax.swing.JTextField bbook_publisher_field;
    private javax.swing.JTextField bbook_total_price_field;
    private javax.swing.JTextField bbook_year_field;
    private javax.swing.JButton book_buy_button;
    private javax.swing.JButton book_drop_button;
    private javax.swing.JTable book_table;
    private javax.swing.JTextField credit_card_field;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel last_shoppings;
    // End of variables declaration//GEN-END:variables
}
